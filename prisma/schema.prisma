// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid()) @db.VarChar(25)
  email         String    @unique
  name          String?
  password      String?
  emailVerified DateTime? @map("email_verified")
  imageUrl      String?   @map("image_url")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  publications Publication[]
  accounts     Account[]
  sessions     Session[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid()) @db.VarChar(25)
  userId            String  @map("user_id") @db.VarChar(25)
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid()) @db.VarChar(25)
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id") @db.VarChar(25)
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Publication {
  id          String   @id @default(cuid()) @db.VarChar(25)
  beehiivId   String   @unique @map("beehiiv_id")
  name        String
  description String?
  userId      String   @map("user_id") @db.VarChar(25)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  user    User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  metrics Metric[]
  posts   Post[]

  @@index([userId])
  @@map("publications")
}

model Post {
  id              String    @id @default(cuid()) @db.VarChar(25)
  beehiivId       String    @unique @map("beehiiv_id")
  publicationId   String    @map("publication_id") @db.VarChar(25)
  title           String
  subtitle        String?
  authors         String[]
  status          String
  publishDate     DateTime? @map("publish_date")
  displayedDate   DateTime? @map("displayed_date")
  subjectLine     String?   @map("subject_line")
  previewText     String?   @map("preview_text")
  slug            String
  thumbnailUrl    String?   @map("thumbnail_url")
  webUrl          String    @map("web_url")
  audience        String
  platform        String
  contentTags     String[]  @map("content_tags")
  hiddenFromFeed  Boolean   @default(false) @map("hidden_from_feed")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")

  publication Publication @relation(fields: [publicationId], references: [id], onDelete: Cascade)
  stats       PostStats?

  @@index([publicationId])
  @@index([status])
  @@index([publishDate])
  @@map("posts")
}

model PostStats {
  id                  String   @id @default(cuid()) @db.VarChar(25)
  postId              String   @unique @map("post_id") @db.VarChar(25)
  uniqueOpens         Int      @default(0) @map("unique_opens")
  uniqueClicks        Int      @default(0) @map("unique_clicks")
  openRate            Float    @default(0) @map("open_rate")
  clickRate           Float    @default(0) @map("click_rate")
  clickThroughRate    Float    @default(0) @map("click_through_rate")
  totalSent           Int      @default(0) @map("total_sent")
  bounces             Int      @default(0) @map("bounces")
  delivered           Int      @default(0) @map("delivered")
  deliveredRate       Float    @default(0) @map("delivered_rate")
  spamReports         Int      @default(0) @map("spam_reports")
  unsubscribes        Int      @default(0) @map("unsubscribes")
  unsubscribeRate     Float    @default(0) @map("unsubscribe_rate")
  clicks              String?  @db.Text // JSON array com dados de cliques por URL
  createdAt           DateTime @default(now()) @map("created_at")
  updatedAt           DateTime @updatedAt @map("updated_at")

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([postId])
  @@map("post_stats")
}

model Metric {
  id            String   @id @default(cuid()) @db.VarChar(25)
  publicationId String   @map("publication_id") @db.VarChar(25)
  date          DateTime
  subscribers   Int      @default(0)
  opens         Int      @default(0)
  clicks        Int      @default(0)
  unsubscribes  Int      @default(0)
  newSubs       Int      @default(0) @map("new_subs")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  publication Publication @relation(fields: [publicationId], references: [id], onDelete: Cascade)

  @@unique([publicationId, date])
  @@index([publicationId])
  @@index([date])
  @@map("metrics")
}
